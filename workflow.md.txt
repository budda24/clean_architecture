Assuming new features are supposed to be pushed to origin/main.

Aims:

keep history simple (linear if possible, but make it easy to see multi-commit features)
use pull requests for review (but person making request is responsible for merging/pushing)
try to minimize branch shuffling during the process
Make sure you are up to date: git fetch
Make a new feature branch off tip: git checkout -t -b origin/master
Do work and commit
Update one last time before pull request: git pull --rebase ... resolve conflicts/check result ...
Push feature branch: git push origin
Create pull request (and wait for approval)
Push to master: git push origin :master
If step 7 fails, you probably need to do step 4 again (pull rebase).

If you have several commits in the branch it may be better to 7') Update and checkout master (assuming there is no local master branch): git fetch git checkout -b master origin/master 8') Make a merge commit: git merge --no-ff ... amend merge commit message if desired ... 9') Push to master: git push master

If you want to use the automatic GitHub pull request accept 7'') Push the accept pull request button (this should result in something similar to the 7'-9' flow above).

After all of this, it should be safe to delete (and the local master, assuming you used the merge flow).